---
- summary: |
    Авторизация на сайте.
  requirement: |
    Пользователь может авторизоваться на сайте через электронную почту и пароль.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Email = "123testmaster@gmail.com"
    Password = "123testmaster"
  steps:
    - Нажимаем "Sign In"
    - Вводим "Email"
    - Вводим "Password"
    - Нажимаем "Submit"
  expected-result: |
    После успешной авторизации пользователь попадает на главную стравницу сайта "CodeBattle" (https://codebattle.hexlet.io/#lobby)
    В правом верхнем углу отображены данные (аватар, Nickname) пользователя

- summary: |
    Регистрация на сайте.
  requirement: |
    Пользователь может зарегистрироваться на сайте.
  prerequisites: |
    Для проверки данного кейса нам потребуется незарегистрированный email.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster_one"
    Email = "testmaster_one@gmail.com"
    Password = "123testmaster"
  steps:
    - Нажимаем "Sign Up"
    - Вводим "Nickname"
    - Вводим "Email"
    - Вводим "Password"
    - Вводим"Password Confirmation"
    - Нажимаем "Submit"
  expected-result: |
    Регистрация прошла успешно, пользователь попадает на главную стравницу сайта "CodeBattle" (https://codebattle.hexlet.io/#lobby)
    В правом верхнем углу отображены данные (аватар, Nickname) пользователя

- summary: |
    Проверка уникальности никнейма.
  requirement: |
    При регистрации система должна проверять никнейм на уникальность.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123testmaster"
  steps:
    - Нажимаем "Sign Up"
    - Вводим "Nickname"
    - Вводим "Email"
    - Вводим "Password"
    - Вводим"Password Confirmation"
    - Нажимаем "Submit"
  expected-result: |
    Зарегистрироваться не получится, если никнейм уже занят другим пользователем. Поле  "Nickname" будет выделено красным цветом с комментарием, что данный никнейм уже занят

- summary: |
    Проверка работы ограничения по количеству символов никнейма при регистрации.
  requirement: |
    Никнейм должен быть ограничен по количеству символов.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster1testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123testmaster"
  steps:
    - Нажимаем "Sign Up"
    - Вводим "Nickname"
    - Вводим "Email"
    - Вводим "Password"
    - Вводим"Password Confirmation"
    - Нажимаем "Submit"
  expected-result: |
    Зарегистрироваться не получится, если никнейм превышает допустимое количество символов. Поле  "Nickname" будет выделено красным цветом с комментарием, что количество символов должно быть от 3 до 16

- summary: |
    При регистрации нельзя указать некорректную электронную почту.
  requirement: |
    Электронная почта должна проверяться на корректность.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster$gmail.co"
    Password = "123testmaster"
  steps:
    - Нажимаем "Sign Up"
    - Вводим "Nickname"
    - Вводим "Email"
    - Вводим "Password"
    - Вводим"Password Confirmation"
    - Нажимаем "Submit"
  expected-result: |
    Зарегистрироваться не получится, если Email указан некорректно. Поле  "Email" будет выделено красным цветом

- summary: |
    Проверка работы ограничения по количеству символов пароля при регистрации.
  requirement: |
    Пароль должен быть ограничен по количеству символов.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123"
  steps:
    - Нажимаем "Sign Up"
    - Вводим "Nickname"
    - Вводим "Email"
    - Вводим "Password"
    - Вводим"Password Confirmation"
    - Нажимаем "Submit"
  expected-result: |
    Зарегистрироваться не получится, если пароль не соответствует указанным нормам по количеству символов. Поле "Password" будет выделено красным цветом с комментарием, что количество символов должно быть от 6 до 16

- summary: |
    Пароль должен соответствовать требованиям безопасности.
  requirement: |
    Пароль должен соответствовать требованиям безопасности - минимум одна заглавная буква, минимум одна буква нижнего регистра, спецсимволы.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123"
  steps:
    - Нажимаем "Sign Up"
    - Вводим "Nickname"
    - Вводим "Email"
    - Вводим "Password"
    - Вводим"Password Confirmation"
    - Нажимаем "Submit"
  expected-result: |
    Зарегистрироваться не получится, если пароль не соответствует требованиям безопасности - минимум одна заглавная буква, минимум одна буква нижнего регистра, спецсимволы

- summary: |
    При регистрации должно быть поле для подтверждения пароля.
  requirement: |
    При создании пароля должно существовать второе поле - "Password Confirmation".
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Sign Up"
    - Вводим "Nickname"
    - Вводим "Email"
    - Вводим "Password"
  expected-result: |
    После введения пароля пользователь может подтвердить пароль в специальном для этого поле

- summary: |
    Невозможно зарегистрироваться, если поля "Password" и "Password Confirmation" не совпадают.
  requirement: |
    Пользователь не сможет зарегистрироваться, если поля "Password" и "Password Confirmation" не совпадают.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Sign Up"
    - Вводим "Nickname"
    - Вводим "Email"
    - Вводим "Password"
    - Подтверждаем пароль в поле "Password Confirmation"
  expected-result: |
    При неверном введении пароля поле "Password Confirmation" будет выделено красным цветом с комментарием, что пароли не совпадают

- summary: |
    Есть возможность посмотреть/скрыть пароль.
  requirement: |
    При регистрации/авторизации пользователь может посмотреть/скрыть пароль.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Sign Up"/"Sign In"
    - Вводим "Nickname"
    - Вводим "Email"
    - Вводим "Password"
    - Рядом с полем "Password" есть кнопка, позволяющая показать/скрыть пароль
  expected-result: |
    При нажатии кнопки пароль можно увидеть/скрыть

- summary: |
    Есть возможность восстановить пароль.
  requirement: |
    Зарегистрированный пользователь должен иметь возможность восстановить пароль.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Sign In"
    - Нажимаем "Forgot your password?"
    - В появившемся модальном окне вводим свой Email
    - Нажимаем "Submit"
    - На указанный Email приходит системное сообщение с ссылкой для сброса пароля
    - Переходим по ссылке и вводим новый пароль, сохраняем
    - Возвращаемся на сайт https://codebattle.hexlet.io и логинимся с новым паролем
  expected-result: |
    Пользователь успешно авторизован на сайте с новым паролем

- summary: |
    Все поля при авторизации должны быть заполнены.
  requirement: |
    Авторизация невозможна, если хотя бы одно поле не заполнено.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Sign In"
    - Не вводим "Email"
    - Вводим "Password"   
  expected-result: |
    Авторизация не выполняется, если оба поля "Email" и "Password" не заполнены

- summary: |
    Все поля при регистрации должны быть заполнены.
  requirement: |
    Регистрация невозможна, если хотя бы одно поле не заполнено.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Sign Up"
    - Не вводим "Nickname"
    - Вводим "Email"
    - Вводим "Password"
    - Не вводим "Password Confirmation"
    - Нажимаем "Submit" 
  expected-result: |
    Регистрация не выполняется, если все поля для ввода не заполнены

- summary: |
    У авторизованного пользователя на главной странице отображается чат с двумя каналами.
  requirement: |
    У чата на главной странице есть два канала - General и Notification.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Авторизовываемся на сайте
    - На главной странице видим чат
    - По умолчанию находимся в канале "General"
    - Можно переключить канал на "Notification"
  expected-result: |
    Каналы чата отображаются без ошибок, пользователь может переключать каналы между собой

- summary: |
    Существующие каналы нельзя удалить или переименовать.
  requirement: |
    Пользователь не может удалять или переименовывать существующие каналы.  
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - На главной странице видим чат
    - По умолчанию находимся в канале "General"
    - Можно переключить канал на "Notification"
    - Пытаемся удалить/переименовать какой-нибудь из каналов
  expected-result: |
    Ни один из каналов нельзя удалить или переименовать

- summary: |
    Проверка работы отправки сообщения в чат.
  requirement: |
    Пользователь должен иметь возможность отправлять сообщения в чат.  
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - На главной странице видим чат
    - По умолчанию находимся в канале "General"
    - Вводим текст сообщения в поле для ввода
    - Нажимаем "Send"
  expected-result: |
    Сообщение отправлено в чат

- summary: |
    Проверка видимости никнейма пользователя при отправлении сообщения в чат.
  requirement: |
    Другие пользователи могут видеть имя отправителя сообщения.  
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - По умолчанию находимся в канале "General"
    - Отправляем в чат сообщение
  expected-result: |
    В чате видно никнейм пользователя, отправившего сообщение

- summary: |
    Коммуникация в чате, пользователь может напрямую отвечать другому пользователю.
  requirement: |
    Пользователь может напрямую отвечать другому пользователю в чате.  
  prerequisites: |
    Для проверки данного тест-кейса заводим еще один тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации по умолчанию находимся в канале "General"
    - Отправляем сообщение в чат
    - Выходим из аккаунта
    - Авторизуемся под вторым тестовым аккаунтом
    - Левой кнопкой мыши нажимаем на никнейм и копируем его
    - Вставляем скопированный никнейм в поле для ввода сообщения
    - Пишем сообщение
    - Нажимаем "Send"
  expected-result: |
    В чате отображается отправленное сообщение другому пользователю

- summary: |
    Проверка корректного отображения сообщений в чате.
  requirement: |
    Если сообщений в чате слишком много, то появляется полоса прокрутки.  
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - По умолчанию находимся в канале "General"
    - Отправляем несколько сообщений в чат
  expected-result: |
    Когда сообщений становится слишком много, в чате справа появляется полоса прокрутки

- summary: |
    Проверка корректного отображения сообщений в каналах чата.
  requirement: |
    При переключении в канал, отображаются последние сообщения в чате.  
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - По умолчанию находимся в канале "General"
    - Меняем канал на "Notification"
    - Возвращаемся обратно в канал "General"
  expected-result: |
    При переключении отображаются последние отправленные сообщения в каналах чата

- summary: |
    Возможные опции взаимодействия с другим пользователем при клике на его никнейм в чате.
  requirement: |
    При клике на автора сообщения появляется модальное окно с возможными взаимодействиями с пользователем.  
  prerequisites: |
    Для проверки данного тест-кейса заводим еще один тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
  steps:
    - По умолчанию находимся в канале "General"
    - Отправляем сообщение в чат
    - Выходим аккаунта
    - Авторизовываемся под вторым аккаунтом
    - В чате находим отправленное нами сообщение
    - Нажимаем на никнейм
  expected-result: |
    После нажатия появляется модальное окно с опциями по взаимодействию с пользователем

- summary: |
    Никнейм пользователя можно скопировать.
  requirement: |
    Никнейм пользователя можно скопировать.  
  prerequisites: |
    Для проверки данного тест-кейса заводим еще один тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
  steps:
    - По умолчанию находимся в канале "General"
    - Отправляем сообщение в чат
    - Выходим аккаунта
    - Авторизовываемся под вторым аккаунтом
    - В чате находим отправленное нами сообщение
    - Нажимаем на никнейм
    - После нажатия в модальном окне появляется несколько опций
    - Выбираем "Copy Name"
  expected-result: |
    Никнейм пользователя успешно скопирован

- summary: |
    Кнопка "Info" и переадресация на страницу пользователя.
  requirement: |
    Есть кнопка "Info" с переадресацией на страницу пользователя.
  prerequisites: |
    Для проверки данного тест-кейса заводим еще один тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
  steps:
    - По умолчанию находимся в канале "General"
    - Отправляем сообщение в чат
    - Выходим аккаунта
    - Авторизовываемся под вторым аккаунтом
    - В чате находим отправленное нами сообщение
    - Нажимаем на никнейм
    - После нажатия в модальном окне появляется несколько опций
    - Выбираем "Info"
  expected-result: |
    Система перенапрявляет нас на страницу пользователя

- summary: |
    Есть возможность подписаться на пользователя.
  requirement: |
    Есть кнопка "Follow", на пользователя можно подписаться и отслеживать его активность.
  prerequisites: |
    Для проверки данного тест-кейса заводим еще один тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
  steps:
    - По умолчанию находимся в канале "General"
    - Отправляем сообщение в чат
    - Выходим аккаунта
    - Авторизовываемся под вторым аккаунтом
    - В чате находим отправленное нами сообщение
    - Нажимаем на никнейм
    - После нажатия в модальном окне появляется несколько опций
    - Выбираем "Follow"
  expected-result: |
    Справа сверху возле аватарки авторизованного пользователя появляется красный бинокль, при наведении на него отображается ID отслеживаемого пользователя

- summary: |
    Отправка личного сообщения пользователю.
  requirement: |
    Пользователю можно отправить личное сообщение.
  prerequisites: |
    Для проверки данного тест-кейса заводим еще один тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
  steps:
    - По умолчанию находимся в канале "General"
    - Отправляем сообщение в чат
    - Выходим аккаунта
    - Авторизовываемся под вторым аккаунтом
    - В чате находим отправленное нами сообщение
    - Нажимаем на никнейм
    - После нажатия в модальном окне появляется несколько опций
    - Выбираем "Direct message"
  expected-result: |
    Система создает приватный чат с выбранным пользователем

- summary: |
    Отправка приглашения на игру.
  requirement: |
    Пользователю можно отправить приглашение на игру.
  prerequisites: |
    Для проверки данного тест-кейса заводим еще один тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
  steps:
    - По умолчанию находимся в канале "General"
    - Отправляем сообщение в чат
    - Выходим аккаунта
    - Авторизовываемся под вторым аккаунтом
    - В чате находим отправленное нами сообщение
    - Нажимаем на никнейм
    - После нажатия в модальном окне появляется несколько опций
    - Выбираем "Send an invite"
  expected-result: |
    Открывается модальное окно с игровыми параметрами.
    В поле "opponent" – пользователь, которому будет отправлено приглашение на игру после настройки игровых параметров

- summary: |
    Видимость пользователей, которые сейчас онлайн.
  requirement: |
    Пользователь может видеть, кто из других пользователей сейчас онлайн.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - По умолчанию находимся в канале "General"
  expected-result: |
    Справа от чата видно список пользователей, которые сейчас онлайн

- summary: |
    Пользователю доступна страница "Users rating".
  requirement: |
    Пользователь может просматривать рейтинг игроков за все время.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице справа находим таблицу "Leaderbord"
    - Выбираем столбец "All"
  expected-result: |
    В таблице отображены последние семь пользователей с наивысшим рейтингом за все время

- summary: |
    Рейтинг пользователей обновляется автоматически.
  requirement: |
    Рейтинг обновляется автоматически в соответствии с успехами пользователей.
  prerequisites: |
    Для проверки данного тест-кейса нам будет нужен второй тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации создаем игру между тестовыми аккаунтами
    - Запоминаем свой текущий рейтинг на каждом аккаунте
    - На одном из аккаунтов пишем правильное решение задачи и выигрываем
    - Переходим на главную страницу https://codebattle.hexlet.io/
    - На главной странице справа находим таблицу "Leaderbord" и нажимаем "Top list"
    - На странице рейтинга в поисковом поле вводим никнеймы обоих тестовых аккаунтов
  expected-result: |
    У каждого тестового аккаунта изменился рейтинг: победивший аккаунт поднялся в рейтинге, проигравший - опустился

- summary: |
    Проверка работы сортировки пользователей в таблице рейтинга.
  requirement: |
    Можно настроить сортировку по месту, рейтингу, сыгранным играм, дате авторизации на сайте.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице справа находим таблицу "Leaderbord"
    - Нажимаем "Top list"
    - Переходим на страницу с полным рейтингом пользователей
    - Настраиваем нужную сортировку
  expected-result: |
    Пользователь может настроить сортировку по месту, рейтингу, сыгранным играм, дате авторизации на сайте.

- summary: |
    Проверка настройки фильтрации по количеству пользователей на странице.
  requirement: |
    Можно настроить фильтрацию отображения пользователей по их количеству на странице.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице справа находим таблицу "Leaderbord"
    - Нажимаем "Top list"
    - Переходим на страницу с полным рейтингом пользователей
    - Справа сверху находим элемент с числовым количеством "Users per page"
    - Выбираем нужное количество пользователей для отображения на странице
  expected-result: |
    Система показывает указанное при фильтрации количество пользователей на странице.

- summary: |
    Проверка работы чекбокса "With bots".
  requirement: |
    Рейтинг пользователей отображается с учетом игр, сыгранных с ботом, либо без него.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице справа находим таблицу "Leaderbord"
    - Нажимаем "Top list"
    - Переходим на страницу с полным рейтингом пользователей
    - Справа сверху находим чекбокс "With bots"
    - Ставим в нем галочку
    - Убираем галочку
  expected-result: |
    Система показывает рейтинг пользователей, учитывая сыгранные игры с ботом/без бота.

- summary: |
    Поиск пользователя по никнейму в рейтинге пользователей.
  requirement: |
    На странице рейтинга есть поисковая строка по никнейму пользователя.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице справа находим таблицу "Leaderbord"
    - Нажимаем "Top list"
    - Переходим на страницу с полным рейтингом пользователей
    - В поисковой строке начинаем вводить никнейм пользователя
  expected-result: |
    Система находит нужного пользователя по введенному никнейму.

- summary: |
    Пользователю доступна страница "Tasks".
  requirement: |
    Пользователь может просматривать страницу "Tasks" с заданиями, созданными другими пользователями.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации нажимаем на свой профиль в правом верхнем углу
    - Выбираем "Tasks"
  expected-result: |
    Осуществляется автоматический переход на страницу "Tasks" с заданиями, созданными другими пользователями

- summary: |
    Просмотр заданий, созданных другими пользователями.
  requirement: |
    Пользователь может просматривать задания, созданные другими пользователями.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Перейти на страницу "Tasks".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Видим задания, созданные другими пользователями
    - На строке каждого задания справа есть кнопка "Show"
    - Нажимаем "Show"
  expected-result: |
    Открывается страница задания с параметрами и описанием

- summary: |
    Пользователь доступна страница создания задания.
  requirement: |
    Пользователь может создавать свои задания.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Перейти на страницу "Tasks".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем кнопку "Create new task"
  expected-result: |
    Открывается страница для создания задания с настройками параметров и описания

- summary: |
    Неаозможно создать задание с уже существующим названием.
  requirement: |
    Название задания должно быть уникальным.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Перейти на страницу "Tasks".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Create new task"
    - В поле ввода "Name" вводим название задания
    - Над полем "Name" прописано, что название задания должно быть уникальным
  expected-result: |
    Система не даст пользователю создать задание с уже существующим названием

- summary: |
    Настройка видимости задания для других пользователей.
  requirement: |
    При создании задания можно выбрать видимость для других пользователей "hidden/public".
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Перейти на страницу "Tasks".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Create new task"
    - В поле ввода "Visibility" выбираем "hidden", если нужно скрыть задание от других пользователей
    - В поле ввода "Visibility" выбираем "public", если задание будет видно всем пользователям
    - Сохраняем
  expected-result: |
    Система создает задание с выбранной видимостью "hidden/public"

- summary: |
    Пользователь может создавать задания.
  requirement: |
    Можно выбрать уровень сложности.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Перейти на страницу "Tasks".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Create new task"
    - В поле ввода "Level" выбираем один из предложенных уровней сложности - "Elementary", "Easy", "Medium", "Hard"
    - Сохраняем
  expected-result: |
    Система создает задание с выбранным уровнем сложности

- summary: |
    Невозможно создать задание, если заполнены не все поля.
  requirement: |
    Система не позволит пользователю сохранить задание, если при создании заполнены не все поля.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Перейти на страницу "Tasks".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Create new task"
    - Заполняем только поле "Name" или выбираем только "Level"
    - Сохраняем
  expected-result: |
    Система не позволяет создать задание, если заполнены не все поля. Незаполненные обязательные поля будут подсвечены

- summary: |
    Пользователь может создавать пакет заданий.
  requirement: |
    Пользователь может создавать свой пакет заданий.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Перейти на страницу "Tasks".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Task packs"
    - Нажимаем "Create new task pack"
  expected-result: |
    Открывается страница создания нового "Task pack". 
    На странице есть поле для ввода названия - "Name".
    Настройка видимости "Visibility" для других пользователей - hidden/public.
    Поле для ввода id заданий "Task_ids", которые можно объединить в новый "Task pack"

- summary: |
    Невозможно создать два "Task pack" с одинаковым названием.
  requirement: |
    Название "Task pack" должно быть уникальным, невозможно создать два "Task pack" с одинаковым названием.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Перейти на страницу "Tasks" и нажать "Task packs".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Name = "test"
  steps:
    - Нажимаем "Create new task pack"
    - В поле ввода "Name" вводим тестовые данные
    - Над полем "Name" прописано, что название задания должно быть уникальным
    - Заполняем остальные параметры произвольными данными
    - Нажимаем "Save"
    - Оказываемся на странице созданного задания
    - Далее нажимаем кнопку "Back" и возвращаемся на страницу "Task packs"
    - Нажимаем "Create new task pack"
    - В поле ввода "Name" вводим тестовые данные
    - Заполняем остальные параметры произвольными данными
    - Нажимаем "Save"
  expected-result: |
    Система не даст пользователю создать "new task pack", если название задания уже было занято. 
    Под полем "Name" появится уведомление, что данное название уже было занято

- summary: |
    Настройка видимости "task pack" для других пользователей.
  requirement: |
    При создании "new task pack" можно настроить видимость для других пользователей - "hidden/public".
  prerequisites: |
    Для проверки данного тест-кейса заводим еще один тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Перейти на страницу "Tasks" и нажать "Task packs".
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Create new task pack"
    - В поле ввода "Visibility" выбираем "hidden"
    - Заполняем остальные параметры произвольными данными
    - Нажимаем "Save"
    - Оказываемся на странице созданного задания
    - Далее нажимаем кнопку "Back" и возвращаемся на страницу "Task packs"
    - Нажимаем "Create new task pack"
    - В поле ввода "Visibility" выбираем "public"
    - Заполняем остальные параметры произвольными данными
    - Нажимаем "Save"
    - Выходим из текущего аккаунта и авторизовываемся под вторым
    - Переходим на страницу "Tasks" и нажимаем "Task packs"
  expected-result: |
    На странице "Task packs" отображается созданный пак задач с "public visibility" для других пользователей.
    Не отображается пак задач с "hidden visibility" для других пользователей

- summary: |
    Объединение нескольких заданий по id при создании "new task pack".
  requirement: |
    Можно выбрать id заданий, которые нужно объединить в один пак.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Перейти на страницу "Tasks" и нажать "Task packs".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Нажимаем "Create new task pack"
    - В поле ввода "Task_ids" вводим id заданий, которые хотим объединить
    - Заполняем остальные параметры произвольными данными
    - Нажимаем "Save"
  expected-result: |
    Система создает пак заданий с введенными "Task_ids"

- summary: |
    Невозможно создать "new task pack", если заполнены не все поля.
  requirement: |
    Система не позволяет пользователю сохранить создданый пак заданий, если заполнены не все поля - "Name", "Task_ids".
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Перейти на страницу "Tasks" и нажать "Task packs".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Name = "test"
    Task_ids = "1,2,3"
  steps:
    - Нажимаем "Create new task pack"
    - Заполняем только поле "Name" и нажимаем "Save"
    - Очищаем поле "Name", оставляем его пустым
    - Вводим тестовые данные в "Task_ids"
    - Нажимаем "Save"
  expected-result: |
    Система не позволяет создать пак заданий, если оба поля не заполнены

- summary: |
    Проверка удаления/редактирования заданий.
  requirement: |
    Созданные task и task pack можно редактировать/удалить.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации нажимаем на свой профиль в правом верхнем углу
    - Выбираем "Tasks"
    - Переходим на страницу заданий
    - Нажимаем "Create new task"/"Create new task pack"
    - Создаем новое задание/пак заданий
    - При успешном создании система перенаправляет нас на страницу задания/пака заданий
    - Под заданиями видим кнопки "Edit/Delete"
    - Нажимаем "Edit"
    - Редактируем и сохраняем
    - Нажимаем "Delete"
    - Во всплывающем окне нажимаем Ок
  expected-result: |
    Система позволяет пользователю удалять и редактировать созданные задания/паки заданий

- summary: |
    Пользователю доступен личный кабинет.
  requirement: |
    На главной странице в правом верхнем углу пользователю доступен личный кабинет.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации нажимаем на свой профиль в правом верхнем углу
  expected-result: |
    После авторизации в правом верхнем углу пользователю доступен личный кабинет

- summary: |
    Отображение аватара в профиле пользователя.
  requirement: |
    В профиле пользователя корректно отображается аватар.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации нажимаем на свой профиль в правом верхнем углу
    - Выбираем "My profile" и переходим на страницу своего профиля
  expected-result: |
    Аватар пользователя отображается корректно

- summary: |
    Пользователю доступна смена аватара в профиле.
  requirement: |
    Фото(аватар) пользователя можно заменить.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации в правом верхнем углу видим свой никнейм и аватар
    - Нажимаем на никнейм
    - В появившемся меню выбираем "My profile"
    - Нажимаем и переходим в личный кабинет
    - Рядом с фото есть кнопка редактирования
    - Нажимаем и меняем фото
  expected-result: |
    Старое фото(аватар) меняется на новое

- summary: |
    Пользователю доступны настройки в личном кабинете.
  requirement: |
    В личном кабинете пользователю доступны настройки.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации в правом верхнем углу видим свой никнейм и аватар
    - Нажимаем на никнейм
    - В появившемся меню выбираем "Settings"
    - Нажимаем и переходим в настройки
  expected-result: |
    Открывается страница с доступными пользователю настройками

- summary: |
    Пользователь может сменить никнейм.
  requirement: |
    В настройках в личном кабинете пользователю доступна опция смены никнейма.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации в правом верхнем углу видим свой никнейм и аватар
    - Нажимаем на никнейм
    - В появившемся меню выбираем "Settings"
    - Нажимаем и переходим в настройки
    - В поле "Your name" вводим новый никнейм
    - Нажимаем кнопку "Save"
  expected-result: |
    Новые настройки успешно сохранены, никнейм пользователя сменен

- summary: |
    Пользователь может выбрать язык программирования как "Weapon".
  requirement: |
    В настройках в личном кабинете пользователь может выбрать язык программирования как "Weapon".
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Нажать на никнейм и перейти в "Settings".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Your weapon = "Java", "Php"
  steps:
    - В поле "Your weapon" выбираем "Java"
    - Нажимаем кнопку "Save"
    - Нажимаем на свой никнейм в правом верхнем углу и выбираем "My profile"
    - В профиле рядом с "Lang" отображается иконка выбранного языка программирования, при наведении на нее курсора видим "Java"
    - Снова переходим в настройки и в поле "Your weapon" выбираем "Php"
    - Нажимаем кнопку "Save"
    - Переходим в свой профиль
    - В профиле рядом с "Lang" иконка и название языка программирования сменились на "Php"
  expected-result: |
    Настройки сохраняются, пользователь может выбирать язык программирования как "Weapon"

- summary: |
    Пользователь может указать "Clan".
  requirement: |
    В настройках пользователь может указать свой "Clan".
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Нажать на никнейм и перейти в "Settings".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Clan = "junior_qa"
  steps:
    - В поле "Clan" вводим тестовые данные
    - Нажимаем кнопку "Save"
    - Обновляем страницу
  expected-result: |
    Настройки сохранены и после обновления страницы введенные данные отображаются корректно

- summary: |
    Пользователь может выбрать "Sound type".
  requirement: |
    В настройках в личном кабинете пользователь может выбрать "Sound type".
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Нажать на никнейм и перейти в "Settings".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Sound type = "Standard"
  steps:
    - В "Sound type" по умолчанию стоит "Dendy"
    - Выбираем "Sound type" - "Standard"
    - Нажимаем кнопку "Save"
    - Обновляем страницу
  expected-result: |
    Настройки сохранены, после обновления страницы выбранный "Sound type" не меняется

- summary: |
    Пользователь может выбрать "Sound level".
  requirement: |
    В настройках в личном кабинете пользователь может выбрать "Sound level".
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Нажать на никнейм и перейти в "Settings".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - Ставим "Sound level" на максимум
    - Нажимаем кнопку "Save"
    - Обновляем страницу
    - Меняем "Sound level" на минимум
    - Нажимаем кнопку "Save"
    - Обновляем страницу
  expected-result: |
    Настройки сохранены и не меняются после обновления страницы, пользователь может настраивать "Sound level"

- summary: |
    Добавление ссылок на другие аккаунты.
  requirement: |
    В настройках пользователь может добавить ссылки на свои аккаунты в GitHub и Discord.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Нажать на никнейм и перейти в "Settings".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - В "Socials" выбираем, какую ссылку хотим добавить
    - Добавляем ссылку
    - Сохраняем
  expected-result: |
    Настройки сохранены, пользователь успешно добавил ссылки на свои аккаунты в GitHub и Discord

- summary: |
    Выход из аккаунта.
  requirement: |
    Пользователь может выйти из аккаунта.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации в правом верхнем углу видим свой никнейм и аватар
    - Нажимаем на никнейм
    - В появившемся меню выбираем "Sign out"
  expected-result: |
    Пользователь вышел из своего аккаунта

- summary: |
    Пользователь видит свою статистику в личном кабинете.
  requirement: |
    В личном кабинете отображается статистика пользователя и завершенные игры.
  prerequisites: |
    Для отображения статистики должна быть хотя бы одна завершенная игра.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации в правом верхнем углу видим свой никнейм и аватар
    - Нажимаем на никнейм
    - В появившемся меню выбираем "My profile"
    - Нажимаем и переходим в личный кабинет
  expected-result: |
    В личном кабинете отображается статистика пользователя и завершенные игры

- summary: |
    Пользователю доступна страница "Турниры/Tournaments".
  requirement: |
    Пользователь может просматривать страницу "Турниры/Tournaments".
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
  expected-result: |
    Открывается страница со списком турниров

- summary: |
    Просмотр текущих турниров.
  requirement: |
    Пользователь может видеть список турниров, которые проходят сейчас.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
  expected-result: |
    Открывается страница со списком турниров, сверху отображаются текущие турниры

- summary: |
    Участие в турнирах.
  requirement: |
    Пользователь может присоединиться к турнирам, которые проходят сейчас.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - В списке "Live tournaments" выбираем любой турнир и нажимаем кнопку "Show"
    - В правом верхнем углу нажимаем кнопку "Join"
  expected-result: |
    Пользователь становится участником выбранного турнира

- summary: |
    Выход из турнира.
  requirement: |
    Пользователь может покинуть турнир.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - В списке "Live tournaments" выбираем любой турнир и нажимаем кнопку "Show"
    - В правом верхнем углу нажимаем кнопку "Join"
    - В правом верхнем углу нажимаем кнопку "Leave"
  expected-result: |
    Пользователь перестает быть участником выбранного турнира

- summary: |
    Просмотр завершенных турниров.
  requirement: |
    Пользователь может видеть список завершенных турниров.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу вниз, до "Completed  tournaments"
  expected-result: |
    Пользователь видит завершенные турниры

- summary: |
    Создание турнира.
  requirement: |
    У пользователя есть возможность создавать турниры.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - Заполняем все необходимые поля
     - Нажимаем "Create"
  expected-result: |
    Новый турнир успешно создан пользователем

- summary: |
    Настройки типа турнира.
  requirement: |
    Пользователь может выбрать тип турнира - individual/team/swiss/arena/versus.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В поле "Type" выбираем нужный вариант
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Добавление описания турнира.
  requirement: |
    Пользователь может добавить описание турнира.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В поле "Description" добавляем описание турнира
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Установка даты и времени турнира.
  requirement: |
    Пользователь может установить дату и время начала турнира.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В графе "Starts at" устанавливаем нужную дату и время
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Тип доступа к турниру.
  requirement: |
    Пользователь может выбрать тип доступа к турниру - public/token.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В графе "Access type" выбираем нужный вариант
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Настройка task strategy турнира.
  requirement: |
    Пользователь может настроить task strategy -  random_per_game/random_per_round/sequential.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В графе "Task strategy" выбираем нужный вариант
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Настройка score strategy турнира.
  requirement: |
    Пользователь может настроить score strategy - time_and_tests/win_loss/one_zero.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В графе "Score strategy" выбираем нужный вариант
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Настройка task provider турнира.
  requirement: |
    Пользователь может настроить task provider - level/task_pack/task_pack_per_round/all.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В графе "Task provider" выбираем нужный вариант
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Установка лимита по количеству пользователей в турнире.
  requirement: |
    Пользователь может указать лимит по количеству пользователей для турнира.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В графе "Players limit" выбираем нужный вариант
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Выбор языка программирования для турнира.
  requirement: |
    Есть возможность выбрать язык программирования для турнира.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В графе "Default language" выбираем нужный вариант
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Выбор уровня сложности для турнира.
  requirement: |
    Есть возможность выбрать уровень сложности для турнира.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В графе "Level" выбираем нужный вариант
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Настройка match timeout в секундах.
  requirement: |
    Есть возможность указать match timeout в секундах.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В графе "Match timeout seconds" устанавливаем нужный вариант
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Настройка break duration в секундах.
  requirement: |
    Есть возможность указать break duration в секундах.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В графе "Break duration seconds" устанавливаем нужный вариант
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Добавление Event в турнир.
  requirement: |
    Есть возможность добавить Event в турнир.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В графе "Event" устанавливаем нужный вариант
    - Заполняем остальные поля
     - Нажимаем "Create"
  expected-result: |
    Выбранные параметры применяются к созданному турниру

- summary: |
    Проверка отправки сообщения в чат турнира.
  requirement: |
    Пользователь может отправлять сообщения в чат турнира.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - Заполняем все поля
    - Нажимаем "Create"
    - Созданный турнир появляется в списке "Live tournaments"
    - На строке с информацией о созданном турнире нажимаем кнопку "Show"
    - Переходим на страницу турнира с чатом
    - Отправляем приветственное сообщение в чат в поле для ввода
  expected-result: |
    Сообщение отправлено успешно и отображается в чате

- summary: |
    Видимость никнейма отправителя сообщения в чате турнира.
  requirement: |
    В чате турнира пользователи могут видеть имя отправителя сообщения.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - Заполняем все поля
    - Нажимаем "Create"
    - Созданный турнир появляется в списке "Live tournaments"
    - На строке с информацией о созданном турнире нажимаем кнопку "Show"
    - Переходим на страницу турнира с чатом
    - Отправляем приветственное сообщение в чат в поле для ввода
  expected-result: |
    Пользователи видят имя отправителя сообщения

- summary: |
    Отправка сообщения другому участнику турнира в чате.
  requirement: |
    В чате турнира пользователь может писать сообщение другому участнику.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - Заполняем все поля
    - Нажимаем "Create"
    - Созданный турнир появляется в списке "Live tournaments"
    - На строке с информацией о созданном турнире нажимаем кнопку "Show"
    - Переходим на страницу турнира с чатом
    - В списке участников выбираем пользователя, которому хотим отправить сообщение
    - Кликаем на его никнейм
    - В открывшемся модальном окне выбираем "Direct message"
    - В поле для ввода вводим сообщение
  expected-result: |
    Другому участнику турнира можно отправить сообщение

- summary: |
    Появление полосы прокрутки в чате турнира.
  requirement: |
    Если сообщений в чате слишком много, то появляется полоса прокрутки.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - Заполняем все поля
    - Нажимаем "Create"
    - Созданный турнир появляется в списке "Live tournaments"
    - На строке с информацией о созданном турнире нажимаем кнопку "Show"
    - Переходим на страницу турнира с чатом
    - В поле для ввода вводим несколько сообщений
  expected-result: |
    Когда сообщений становится слишком много, в чате справа появляется полоса прокрутки

- summary: |
    Проверка работы участия в турнире.
  requirement: |
    Пользователь может стать участником турнира.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - Заполняем все поля
    - Нажимаем "Create"
    - Созданный турнир появляется в списке "Live tournaments"
    - На строке с информацией о созданном турнире нажимаем кнопку "Show"
    - Переходим на страницу турнира
    - В правом верхнем углу нажимаем кнопку "Join"
  expected-result: |
    Пользователь становится участником турнира

- summary: |
    Проверка выхода из турнира.
  requirement: |
    Пользователь может покинуть турнир самостоятельно в любой момент.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - Заполняем все поля
    - Нажимаем "Create"
    - Созданный турнир появляется в списке "Live tournaments"
    - На строке с информацией о созданном турнире нажимаем кнопку "Show"
    - Переходим на страницу турнира
    - В правом верхнем углу нажимаем кнопку "Join"
    - В правом верхнем углу нажимаем кнопку "Leave"
  expected-result: |
    Пользователь больше не является участником турнира

- summary: |
    Удаление созданного турнира.
  requirement: |
    Пользователь, создавший турнир, может его удалить.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - Заполняем все поля
    - Нажимаем "Create"
    - Созданный турнир появляется в списке "Live tournaments"
    - На строке с информацией о созданном турнире нажимаем кнопку "Show"
    - Переходим на страницу турнира
    - В правом верхнем углу нажимаем на зеленую кнопку с тремя точками, открываем меню
    - Из списка действий выбираем "Cancel"
  expected-result: |
    Турнир отменен и удален

- summary: |
    Доступ public к турниру.
  requirement: |
    Турнир с типом доступа public доступен для участия всем пользователям.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В поле "Access" выбираем тип "public"
    - Заполняем остальные поля
    - Нажимаем "Create"
  expected-result: |
    Созданный турнир доступен всем пользователям

- summary: |
    Доступ token к турниру.
  requirement: |
    Турнир с типом доступа token доступен пользователю, который его создал, и участникам данного турнира.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на столбец "Tournaments"
    - Прокручиваем страницу до середины
    - Между "Live tournaments" и "Completed  tournaments" нажимаем кнопку "Tournaments Info"
    - Прокручиваем страницу вниз и видим область "Create a new tournament"
    - В поле "Access" выбираем тип "token"
    - Заполняем остальные поля
    - Нажимаем "Create"
  expected-result: |
    Созданный турнир доступен только приглашенным пользователям и создателю турнира

- summary: |
    Страница создания новой игры.
  requirement: |
    Пользователю доступна страница создания новой игры.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - После авторизации на главной странице нажимаем на кнопку "Create a game"
  expected-result: |
    Открывается страница создания новой игры

- summary: |
    Выбор уровня сложности при создании игры.
  requirement: |
    При создании игры пользователь может сам выбрать уровень сложности.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    На главной странице нажать на кнопку "Create a game".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - В поле "Level" выбираем любой уровень сложности - "Elementary", "Easy", "Medium", "Hard"
    - В поле "Game type" выбираем "With a bot"
    - Выбираем любые значения в других параметрах
    - Нажимаем "Create battle"
  expected-result: |
    Пользователь автоматически перенаправляется на страницу созданной игры

- summary: |
    Выбор другого пользователя в качестве соперника при создании игры.
  requirement: |
    При создании пользователь может выбрать тип игры - с другим пользователем.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    На главной странице нажать на кнопку "Create a game".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - В поле "Game type" выбираем "With other user"
    - Выбираем любые значения в других параметрах
    - Нажимаем "Create battle"
  expected-result: |
    Создана новая игра с указанными параметрами. 
    Игра отображается на главной странице, в Lobby. Игра не начнется, пока к ней не присоединится другой пользователь

- summary: |
    Выбор бота в качестве соперника при создании игры.
  requirement: |
    При создании пользователь может выбрать тип игры - с ботом.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    На главной странице нажать на кнопку "Create a game".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
  steps:
    - В поле "Game type" выбираем "With a bot"
    - Выбираем любые значения в других параметрах
    - Нажимаем "Create battle"
  expected-result: |
    Пользователь автоматически перенаправляется на страницу созданной игры

- summary: |
    Выбор друга в качестве соперника при создании игры.
  requirement: |
    При создании пользователь может выбрать тип игры - с другом.
  prerequisites: |
    Для проверки данного тест-кейса нам будет нужен второй тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    На главной странице нажать на кнопку "Create a game".
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
  steps:
    - В поле "Game type" выбираем "With a friend"
    - В появившейся строке "Choose opponent" вводим никнейм второго аккаунта
    - Выбираем любые значения в других параметрах
    - Нажимаем "Create invite"
  expected-result: |
    Выбранному сопернику отправлено приглашение сыграть в созданную игру. 
    На главной странице слева от никнейма пользователя на иконке с мечами отображается цифра - количество отправленных приглашений на игру.
    При клике на иконку появляется модальное окно с никнеймом приглашенного пользователя и кнопкой "Cancel" для отмены приглашения

- summary: |
    При создании игры пользователь может выбрать задачу по названию.
  requirement: |
    Пользователь может выбрать игровую задачу по названию.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    На главной странице нажать на кнопку "Create a game".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Level = "Elementary"
    Task name = "rect_area"
    Game type = "With a bot"
  steps:
    - В поле "Choose task by name" вводим тестовые данные
    - Выбираем бота в качестве соперника
    - Выбираем уровень сложности
    - Устанавливаем любой Time control
    - Нажимаем "Create battle"
  expected-result: |
    Осуществляется автоматический переход на страницу созданной игры с заданными параметрами

- summary: |
    Выбор игровой задачи по тэгам.
  requirement: |
    Пользователь может выбрать игровую задачу по тэгам.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    На главной странице нажать на кнопку "Create a game".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Task tags = "Math", "Rest"
  steps:
    - В поле "Choose task tags" выбираем тестовые данные
    - Выбираем бота в качестве соперника
    - Остальные параметры выбираем произвольно
    - Нажимаем "Create battle"
  expected-result: |
    Осуществляется автоматический переход на страницу созданной игры с заданными параметрами

- summary: |
    Установка временных ограничений при создании игры.
  requirement: |
    Пользователь может установить таймер для игры.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    На главной странице нажать на кнопку "Create a game".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
  steps:
    - В поле "Time control" выбираем любой вариант от 3 до 60 минут
    - Выбираем бота в качестве соперника
    - Остальные параметры настраиваем произвольно
    - Нажимаем "Create battle"
  expected-result: |
    Осуществляется автоматический переход на страницу созданной игры с заданными параметрами

- summary: |
    Гайд для пользователя.
  requirement: |
    На странице созданной игры появляется модальное окно с гайдом - карта игровой страницы.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    На главной странице нажать на кнопку "Create a game".
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
  steps:
    - Выбираем бота в качестве соперника
    - Остальные параметры выставляем произвольно
    - Нажимаем "Create battle"
  expected-result: |
    Осуществляется автоматический переход на страницу созданной игры. 
    Перед началом игры появляется модальное окно для пользователя с гайдом и навигацией по странице

- summary: |
    Темная/светлая тема.
  requirement: |
    Есть возможность выбора темы отображения редактора кода - Light/Dark.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметры "Level", "Time control", "Choose task by name or tags" выставить произвольно.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
  steps:
    - После создания оказываемся на странице игры
    - Над редактором кода нажимаем кнопку выбора темы (иконка солнца/луны)
    - Нажимаем на иконку несколько раз
  expected-result: |
    Тема редактора кода меняется в зависимости от выбора пользователя на темную/светлую

- summary: |
    Выбор языка программирования в игре.
  requirement: |
    Во время игры можно выбрать язык программирования для решения задачи.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметры "Level", "Time control", "Choose task by name or tags" выставить произвольно.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
  steps:
    - После создания оказываемся на странице игры
    - Над редактором кода нажимаем кнопку выбора языка программирования
    - Поочередно выбираем несколько языков программирования и смотрим, как ведет себя редактор кода
  expected-result: |
    Выбранный язык автоматически применяется к редактору кода

- summary: |
    Редактор кода во время игры работает корректно.
  requirement: |
    Редактор кода принимает символы русского/английского языка и спецсимволы.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить произвольно. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Level = "Elementary"
    Task name = "rect_area"
  steps:
    - После создания оказываемся на странице игры
    - В редакторе кода вводим решение задачи - "return width=length;"
    - Пробуем ввести решение с ошибками - "retrn widh=lengt;"
    - Смотрим, как ведет себя редактор
  expected-result: |
    Символы отображаются корректно. 
    Если слово написано с ошибкой, оно подчеркивается и при наведении курсора появляется подсказка

- summary: |
    Просмотр редактор кода соперника.
  requirement: |
    Во время игры пользователь может видеть редактор кода соперника в режиме онлайн.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметры "Level", "Time control", "Choose task by name or tags" выставить произвольно.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
  steps:
    - После создания оказываемся на странице игры
  expected-result: |
    С правой стороны отображается редактор с кодом соперника. В режиме онлайн можно отслеживать его решение задачи

- summary: |
    Нумерация строк.
  requirement: |
    Все строки редактора кода пронумерованы.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить произвольно. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Level = "Elementary"
    Task name = "rect_area"
  steps:
    - После создания оказываемся на странице игры
    - В редакторе кода видим, что каждая строка пронумерована
    - Вводим решение задачи - "return width=length;"
    - Пробуем полностью удалить одну из строк
    - Видим, что нумерация строк автоматически изменилась
  expected-result: |
    Каждая строка в редакторе кода пронумерована. Нумерация обновляется автоматически с добавлением/удалением строк

- summary: |
    Язык текста задачи.
  requirement: |
    Пользователь может менять язык задачи с RU на EN и наоборот.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить произвольно. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Level = "Elementary"
    Task name = "rect_area"
  steps:
    - После создания оказываемся на странице игры
    - Сверху над редактором кода видим текст задачи, по умолчанию на английском языке
    - Нажимаем кнопку EN и меняем язык на русский
  expected-result: |
    Текст задачи автоматически меняется с EN на RU и наоборот

- summary: |
    Сброс прогресса.
  requirement: |
    Во время игры можно сбросить редактор кода к первоначальному виду.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить произвольно. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Level = "Elementary"
    Task name = "rect_area"
  steps:
    - После создания оказываемся на странице игры
    - В редакторе кода вводим решение задачи с ошибками - "retrn widh=lengt;"
    - Сверху над редактором находим кнопку с тремя точками
    - Нажимаем и выбираем "Reset Solution"
  expected-result: |
    Написанное решение удалено, редактор кода вернулся к первоначальному виду. Можно писать решение заново

- summary: |
    Таймер игры.
  requirement: |
    Пользователь видит отсчет времени во время игры.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметр "Time control" установить на 3 минуты.
    Параметры "Level", "Choose task by name or tags" выставить произвольно.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Time control = "3 min"
  steps:
    - После создания оказываемся на странице игры
    - Над текстом задания видим установленный таймер в 3 минуты
  expected-result: |
    Отсчет времени начинается сразу после переадресации на страницу созданной игры. Таймер отображается корректно

- summary: |
    Сдача сопернику.
  requirement: |
    Пользователь может сдаться во время игры.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметры "Level", "Time control", "Choose task by name or tags" выставить произвольно.
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
  steps:
    - После создания оказываемся на странице игры
    - Над своим игровым полем находим кнопку с тремя точками
    - Нажимаем и выбираем "Give up"
    - В появившемся модальном окне подтверждаем "Give up"
  expected-result: |
    Пользователь сдался, игра окончена

- summary: |
    Проверка решения.
  requirement: |
    Пользователь может самостоятельно проверить свое решение.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить произвольно. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Level = "Elementary"
    Task name = "rect_area"
  steps:
    - После создания оказываемся на странице игры
    - В редакторе кода вводим решение задачи с ошибками - "return widh=lengt;"
    - Над редактором нажимаем кнопку "Run"
    - В "Output" видим, что решение неверное и выводится "Tests failed"
    - В редакторе кода вводим решение задачи без ошибок - "return width=length;"
    - Нажимаем "Run"
    - В "Output" видим, что решение верное и выводится "All tests passed"
  expected-result: |
    Пользователь может самостоятельно проверить свое решение во время игры.
    Если решение неверное, в "OUTPUT" выводится "Tests failed". 
    Если решение верное,  в "OUTPUT" выводится "All tests passed"

- summary: |
    Победа в игре.
  requirement: |
    Победа присуждается пользователю, который первым правильно решил задачу.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить произвольно. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Level = "Elementary"
    Task name = "rect_area"
  steps:
    - После создания оказываемся на странице игры
    - Видим, что пишет в своем редакторе соперник
    - В редакторе кода вводим решение задачи без ошибок - "return width=length;"
    - Нажимаем "Run"
    - Побеждаем
  expected-result: |
    Пользователь побеждает в игре, если решил задачу быстрее соперника. Игра автоматически завершается

- summary: |
    Победа/проигрыш в игре.
  requirement: |
    После победы/поражения в игре пользователю показывается победное модальное окно.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить на 3 минуты. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Level = "Elementary"
    Task name = "rect_area"
    Time control = "3 min"
  steps:
    - После создания оказываемся на странице игры
    - В редакторе кода ничего не вводим
    - Ждем, пока выиграет бот
    - После проигрыша появляется модальное окно с оповещением о проигрыше, закрываем его
    - Возвращаемся на главную страницу и создаем новую игру с теми же тестовыми данными
    - В редакторе кода вводим решение задачи без ошибок - "return width=length;"
    - Нажимаем "Run"
    - Побеждаем
    - После победы появляется модальное окно с оповещением о победе
  expected-result: |
    Модальное окно с оповещением о победе/проигрыше появляется после каждой победы/поражения и отображается корректно

- summary: |
    Автоматическая проверка решения.
  requirement: |
    Правильность решения задачи определяет приложение.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить на 3 минуты. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Level = "Elementary"
    Task name = "rect_area"
    Time control = "3 min"
  steps:
    - После создания оказываемся на странице игры
    - В редакторе кода вводим решение задачи без ошибок - "return width=length;"
    - Нажимаем "Run"
  expected-result: |
    Система сама автоматически проверяет решение пользователя на правильность

- summary: |
    Проигрыш в игре и "Rematch".
  requirement: |
    После поражения в игре возможно сделать "Rematch" игры.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить на 3 минуты. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Level = "Elementary"
    Task name = "rect_area"
    Time control = "3 min"
  steps:
    - После создания оказываемся на странице игры
    - В редакторе кода ничего не вводим
    - Ждем, пока выиграет бот
    - После оповещения о поражении справа над редактором кода соперника нажимаем кнопку "Rematch"
  expected-result: |
    После нажатия запускается новая игра с этим же противником, но меняется условие задачи. 
    Параметры "Level" и "Time control" сохраняются

- summary: |
    Завершение игры.
  requirement: |
    Игра завершается при победе/самостоятельной сдаче/победе противника/сдаче противника/завершении времени.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать бота в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить на 3 минуты. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Level = "Elementary"
    Task name = "rect_area"
    Time control = "3 min"
  steps:
    - После создания оказываемся на странице игры
    - Побеждаем (решение задачи - "return width=length;")
    - Проигрываем 
    - Сдаемся
    - Сдается противник
    - Просто ждем, пока закончится игровое время
  expected-result: |
    В любом из перечисленных случаев игра завершается

- summary: |
    Начисление игровых очков.
  requirement: |
    За победу над другим пользователем начисляются очки.
  prerequisites: |
    Для проверки данного тест-кейса заводим еще один тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать второй тестовый аккаунт в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить на 3 минуты. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a friend"
    Level = "Elementary"
    Task name = "rect_area"
    Time control = "3 min"
  steps:
    - После создания оказываемся на странице игры
    - Сверху под никнеймом запоминаем количество своих очков
    - В редакторе кода вводим решение задачи без ошибок - "return width=length;"
    - Нажимаем "Run" и побеждаем
    - Обновляем страницу
  expected-result: |
    Победившему пользователю начисляются очки

- summary: |
    Отмена игры, пока к ней не присоединился другой пользователь.
  requirement: |
    Игру "Game type" = "with other user" можно отменить до тех пор, пока к ней не присоединится другой пользователь.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать "Game type" = "with other user".
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить на 3 минуты. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With other user"
    Level = "Elementary"
    Task name = "rect_area"
    Time control = "3 min"
  steps:
    - На главной странице видим только что созданную игру
    - На строке игры справа в самом конце нажимаем крестик
  expected-result: |
    Созданная игра может быть отменена, если к ней еще не присоединился другой пользователь

- summary: |
    Отмена игры, пока к ней не присоединился другой пользователь.
  requirement: |
    Игру "Game type" = "with other user" можно отменить до тех пор, пока к ней не присоединится другой пользователь.
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать "Game type" = "with other user".
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить на 3 минуты. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With other user"
    Level = "Elementary"
    Task name = "rect_area"
    Time control = "3 min"
  steps:
    - На главной странице видим только что созданную игру
    - На строке игры в столбце "Actions" нажимаем кнопку "Continue"
    - На открывшейся странице нажимаем "Cancel"
  expected-result: |
    Созданная игра может быть отменена, если к ней еще не присоединился другой пользователь

- summary: |
    Отправка обратной связи в окно "Send feedback".
  requirement: |
    Пользователю доступна отправка обратной связи в окно "Send feedback".
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать "Game type" = "with a bot".
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить на 3 минуты. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Level = "Elementary"
    Task name = "rect_area"
    Time control = "3 min"
  steps:
    - После создания оказываемся на странице игры
    - В правом нижнем углу нижимаем кнопку "Send feedback"
    - В открывшемся окне пишем свои пожелания/замечания
    - Нажимаем "Send feedback"
  expected-result: |
    Обратная связь отправлена

- summary: |
    Разделение окна обратной связи на категории.
  requirement: |
    Окно обратной связи разделено на 3 категории - "Bug"/"Improvement"/"Feature".
  prerequisites: |
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать "Game type" = "with a bot".
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить на 3 минуты. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster"
    Email = "123testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a bot"
    Level = "Elementary"
    Task name = "rect_area"
    Time control = "3 min"
  steps:
    - После создания оказываемся на странице игры
    - В правом нижнем углу нижимаем кнопку "Send feedback"
  expected-result: |
    Открывается окно для обратной связи, оно разделено на 3 категории — "Bug"/"Improvement"/"Feature"

- summary: |
    Принятие приглашения на игру.
  requirement: |
    Пользователь может принять приглашение на игру от другого пользователя.
  prerequisites: |
    Для проверки данного тест-кейса заводим еще один тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать второй тестовый аккаунт в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить на 3 минуты. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a friend"
    Level = "Elementary"
    Task name = "rect_area"
    Time control = "3 min"
  steps:
    - После нажатия кнопки "Create invite" оказываемся на главной странице, в лобби
    - Выходим из текущего аккаунта и авторизуемся под вторым тестовым аккаунтом
    - Отправленное приглашение отображается на иконке с мечами рядом с никнеймом пользователя
    - Нажимаем на иконку и выбираем "Accept"
  expected-result: |
    Приглашение принято, оба пользователя автоматически перенаправляются на страницу созданной игры

- summary: |
    Отклонение приглашения на игру.
  requirement: |
    Пользователь может отклонить приглашение на игру от другого пользователя.
  prerequisites: |
    Для проверки данного тест-кейса заводим еще один тестовый аккаунт.
    Перейти на страницу "CodeBattle" по ссылке (https://codebattle.hexlet.io/).
    Авторизоваться.
    Создать новую игру, выбрать второй тестовый аккаунт в качестве соперника.
    Параметр "Level" установить на "Elementary".
    Параметр "Time control" установить на 3 минуты. 
    В параметре "Choose task by name or tags" выбрать "rect_area"
    В качестве языка программирования выбираем Node.js
  test-data: |
    Nickname = "testmaster", "testmaster1"
    Email = "123testmaster@gmail.com", "1234testmaster@gmail.com"
    Password = "123tester"
    Game type = "With a friend"
    Level = "Elementary"
    Task name = "rect_area"
    Time control = "3 min"
  steps:
    - После нажатия кнопки "Create invite" оказываемся на главной странице, в лобби
    - Выходим из текущего аккаунта и авторизуемся под вторым тестовым аккаунтом
    - Отправленное приглашение отображается на иконке с мечами рядом с никнеймом пользователя
    - Нажимаем на иконку и выбираем "Decline"
  expected-result: |
    Приглашение отклонено
